/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WeatherDTO,
} from '../models/index';
import {
    WeatherDTOFromJSON,
    WeatherDTOToJSON,
} from '../models/index';

export interface GetWeatherRequest {
    latitude: number;
    longitude: number;
}

/**
 * 
 */
export class WeatherControllerApi extends runtime.BaseAPI {

    /**
     * Retrieves the available weather data.
     * Get weather data
     */
    async getWeatherRaw(requestParameters: GetWeatherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WeatherDTO>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling getWeather().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling getWeather().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/weather`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WeatherDTOFromJSON(jsonValue));
    }

    /**
     * Retrieves the available weather data.
     * Get weather data
     */
    async getWeather(requestParameters: GetWeatherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WeatherDTO> {
        const response = await this.getWeatherRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
