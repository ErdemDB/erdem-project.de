/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TaskDTO,
  TaskEntity,
} from '../models/index';
import {
    TaskDTOFromJSON,
    TaskDTOToJSON,
    TaskEntityFromJSON,
    TaskEntityToJSON,
} from '../models/index';

export interface CreateTaskRequest {
    taskDTO: TaskDTO;
}

export interface DeleteTaskRequest {
    id: string;
}

export interface UpdateTaskRequest {
    taskDTO: TaskDTO;
}

/**
 * 
 */
export class TaskControllerApi extends runtime.BaseAPI {

    /**
     * Creates a new task with the given task details.
     * Creates a new task
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskEntity>> {
        if (requestParameters['taskDTO'] == null) {
            throw new runtime.RequiredError(
                'taskDTO',
                'Required parameter "taskDTO" was null or undefined when calling createTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDTOToJSON(requestParameters['taskDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskEntityFromJSON(jsonValue));
    }

    /**
     * Creates a new task with the given task details.
     * Creates a new task
     */
    async createTask(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskEntity> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the task with the specified ID.
     * Deletes a task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the task with the specified ID.
     * Deletes a task
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of all tasks available.
     * Gets all tasks
     */
    async getTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskEntityFromJSON));
    }

    /**
     * Retrieves a list of all tasks available.
     * Gets all tasks
     */
    async getTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskEntity>> {
        const response = await this.getTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the task with the specified ID based on the provided task details.
     * Updates an existing task
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskDTO'] == null) {
            throw new runtime.RequiredError(
                'taskDTO',
                'Required parameter "taskDTO" was null or undefined when calling updateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDTOToJSON(requestParameters['taskDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the task with the specified ID based on the provided task details.
     * Updates an existing task
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskRaw(requestParameters, initOverrides);
    }

}
